from theme import Theme
from colorindex import ColorIndex

class DoomEmacsTheme(Theme):
    def __init__(self, name, colors):
        self.name = name.lower()
        self.extension = "el"
        self.colors = colors
        gray = self._rgb_to_hex(self._mid_color(self.colors.white, self.colors.black))
        orange = self._rgb_to_hex(self._mix_colors(self.colors.red, self.colors.yellow))
        teal = self._rgb_to_hex(self._mix_colors(self.colors.blue, self.colors.green))
        self.colors = ColorIndex(list(map(self._rgb_to_hex, self.colors.list())))
        self.colors.gray = gray
        self.colors.orange = orange
        self.colors.teal = teal

    def _rgb_to_hex(self, rgb):
        return "#" + "".join(list(map(lambda x: hex(x)[2:].zfill(2), rgb)))

    def _mid_color(self, rgb1, rgb2):
        return tuple(int((x - y) / 2) for x, y in zip(rgb1, rgb2))

    def _mix_colors(self, rgb1, rgb2):
        return tuple(int((int(x) + int(y)) / 2) for x, y in zip(rgb1, rgb2))


    def render(self):
        theme = f";;; {self.name}-theme.el --- generated by wtt2 -*- lexical-binding: t; no-byte-compile: t; -*-\n"
        theme += "(require 'doom-themes)\n\n"
        theme += f"""
(defgroup {self.name}-theme nil
  "Options for the `{self.name}' theme."
  :group 'doom-themes)

(defcustom {self.name}-brighter-modeline nil
  "If non-nil, more vivid colors will be used to style the mode-line."
  :group 'doom-one-theme
  :type 'boolean)

(defcustom {self.name}-brighter-comments nil
  "If non-nil, comments will be highlighted in more vivid colors."
  :group '{self.name}-theme
  :type 'boolean)

(defcustom {self.name}-comment-bg {self.name}-brighter-comments
  "If non-nil, comments will have a subtle, darker background. Enhancing their
legibility."
  :group '{self.name}-theme
  :type 'boolean)

(defcustom {self.name}-padded-modeline doom-themes-padded-modeline
  "If non-nil, adds a 4px padding to the mode-line. Can be an integer to determine the exact padding."
  :group '{self.name}-theme
  :type '(choice integer boolean))
"""
        theme += f"(def-doom-theme {self.name}"
        theme += f"  \"{self.name}\"\n\n"
        theme += f"  ((bg '(\"{self.colors.black}\" \"{self.colors.black}\" nil))\n"
        theme += f"   (bg-alt '(\"{self.colors.briblack}\" \"{self.colors.briblack}\" nil))\n"
        theme += f"   (base0 '(\"{self.colors.black}\" \"black\" \"black\"))\n"
        theme += f"   (base1 '(\"{self.colors.briblack}\" \"brightblack\" \"brightblack\"))\n"
        theme += f"   (base2 '(\"{self.colors.briblack}\" \"brightblack\" \"brightblack\"))\n"
        theme += f"   (base3 '(\"{self.colors.briblack}\" \"brightblack\" \"brightblack\"))\n"
        theme += f"   (base4 '(\"{self.colors.gray}\" \"brightblack\" \"brightblack\"))\n"
        theme += f"   (base5 '(\"{self.colors.briblack}\" \"brightblack\" \"brightblack\"))\n"
        theme += f"   (base6 '(\"{self.colors.briblack}\" \"brightblack\" \"brightblack\"))\n"
        theme += f"   (base7 '(\"{self.colors.briblack}\" \"brightblack\" \"brightblack\"))\n"
        theme += f"   (base8 '(\"{self.colors.white}\" \"white\" \"white\"))\n"
        theme += f"   (fg '(\"{self.colors.briwhite}\" \"briwhite\" \"briwhite\"))\n"
        theme += f"   (fg-alt '(\"{self.colors.white}\" \"white\" \"white\"))\n"
        theme += "   (grey base4)\n"
        theme += f"   (red '(\"{self.colors.red}\" \"red\" \"red\"))\n"
        theme += f"   (orange '(\"{self.colors.orange}\" \"brightred\" \"brightred\"))\n"
        theme += f"   (green '(\"{self.colors.green}\" \"green\" \"green\"))\n"
        theme += f"   (teal '(\"{self.colors.teal}\" \"brightgreen\" \"brightgreen\"))\n"
        theme += f"   (yellow '(\"{self.colors.yellow}\" \"yellow\" \"yellow\"))\n"
        theme += f"   (blue '(\"{self.colors.briblue}\" \"brightblue\" \"brightblue\"))\n"
        theme += f"   (dark-blue '(\"{self.colors.blue}\" \"blue\" \"blue\"))\n"
        theme += f"   (magenta '(\"{self.colors.brimagenta}\" \"brightmagenta\" \"brightmagenta\"))\n"
        theme += f"   (violet '(\"{self.colors.magenta}\" \"magenta\" \"magenta\"))\n"
        theme += f"   (cyan '(\"{self.colors.bricyan}\" \"brightcyan\" \"brightcyan\"))\n"
        theme += f"   (dark-cyan '(\"{self.colors.cyan}\" \"cyan\" \"cyan\"))\n"
        theme += """
   (highlight      yellow)
   (vertical-bar   (doom-darken base4 0.2))
   (selection      red)
   (builtin        yellow)
   (comments       base5)
   (doc-comments   (doom-lighten blue 0.25))
   (constants      orange)
   (functions      yellow)
   (keywords       red)
   (methods        yellow)
   (operators      green)
   (type           orange)
   (strings        blue)
   (variables      fg)
   (numbers        orange)
   (region         `(,(doom-lighten (car bg-alt) 0.15) ,@(doom-lighten (cdr base1) 0.35)))
   (error          red)
   (warning        yellow)
   (success        green)
   (vc-modified    orange)
   (vc-added       green)
   (vc-deleted     red)
        """
        theme += f"""
   ;; custom categories
   (hidden     `(,(car bg) "black" "black"))
   (-modeline-bright {self.name}-brighter-modeline)
   (-modeline-pad
    (when {self.name}-padded-modeline
      (if (integerp {self.name}-padded-modeline) {self.name}-padded-modeline 4)))

   (modeline-fg     fg)
   (modeline-fg-alt base5)

   (modeline-bg
    (if -modeline-bright
        (doom-darken blue 0.475)
      `(,(doom-darken (car bg-alt) 0.35) ,@(cdr base0))))
   (modeline-bg-l
    (if -modeline-bright
        (doom-darken blue 0.45)
      `(,(doom-darken (car bg-alt) 0.1) ,@(cdr base0))))
   (modeline-bg-inactive   `(,(doom-darken (car bg) 0.03) ,@(cdr bg-alt)))
   (modeline-bg-inactive-l `(,(car bg-alt) ,@(cdr base1))))


  ;;;; Base theme face overrides
  (
   ((line-number &override) :foreground base4)
   ((line-number-current-line &override) :foreground fg)
   ((font-lock-comment-face &override)
    :background (if {self.name}-comment-bg (doom-lighten bg 0.05)))
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-inactive :foreground modeline-fg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   (mode-line-emphasis :foreground (if -modeline-bright base8 highlight))

   ;;;; css-mode <built-in> / scss-mode
   (css-proprietary-property :foreground orange)
   (css-property             :foreground green)
   (css-selector             :foreground blue)
   ;;;; doom-modeline
   (doom-modeline-bar         :background (if -modeline-bright modeline-bg highlight))
   (doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
   (doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
   (doom-modeline-buffer-project-root :foreground green :weight 'bold)
   ;;;; elscreen
   (elscreen-tab-other-screen-face :background "{self.colors.briblack}" :foreground "{self.colors.briwhite}")
   ;;;; ivy
   (ivy-current-match       :background base3 :foreground orange)
   (ivy-posframe-cursor     :background red :foreground base0)
   ;;;; js2-mode
   (js2-function-name              :forground yellow)
   (js2-function-param             :foreground blue)
   (js2-warning                    :underline `(:style wave :color ,yellow))
   (js2-error                      :underline `(:style wave :color ,red))
   (js2-external-variable          :underline `(:style wave :color ,blue))
   (js2-jsdoc-tag                  :background nil :foreground red)
   (js2-jsdoc-type                 :background nil :foreground orange)
   (js2-jsdoc-value                :background nil :foreground blue)
   (js2-private-member             :background nil :foreground orange)
   (js2-object-property            :foreground fg)
   ;;;; LaTeX-mode
   (font-latex-math-face :foreground green)
   ;;;; markdown-mode
   (markdown-markup-face :foreground base5)
   (markdown-header-face :inherit 'bold :foreground red)
   ((markdown-code-face &override) :background (doom-lighten base3 0.05))
   ;;;; markdown-mode
   (markdown-list-face         :foreground green)
   (markdown-pre-face          :foreground blue)
   (markdown-blockquote-face   :inherit 'italic :foreground blue)
   (markdown-link-face         :inherit 'bold   :foreground orange)
   (markdown-header-face-1     :weight 'bold    :foreground blue)
   (markdown-header-face-2     :weight 'bold    :foreground orange)
   (markdown-header-face-3     :weight 'bold    :foreground green)
   (markdown-header-face-4     :weight 'bold    :foreground yellow)
   (markdown-header-face-5     :weight 'bold    :foreground blue)
   (markdown-header-face-6     :weight 'bold    :foreground orange)
   ;;;; outline <built-in>
   (outline-1 :foreground blue)
   (outline-2 :foreground orange)
   (outline-3 :foreground teal)
   (outline-4 :foreground magenta)
   (outline-5 :foreground blue)
   (outline-6 :foreground orange)
   (outline-7 :foreground teal)
   (outline-8 :foreground magenta)
   ;;;; org <built-in>
   (org-link                         :foreground blue :underline t)
   (org-document-title               :foreground orange)
   (org-document-info-keyword        :foreground comments)
   (org-meta-line                    :foreground base6)
   (org-tag             :foreground base6 :weight 'normal)
   (org-block                        :background (doom-darken bg 0.2 ) :extend t)
   (org-hide :foreground hidden)
   ;;;; rainbow-delimiters
   (rainbow-delimiters-depth-1-face  :foreground red)
   (rainbow-delimiters-depth-2-face  :foreground orange)
   (rainbow-delimiters-depth-3-face  :foreground green)
   (rainbow-delimiters-depth-4-face  :foreground cyan)
   (rainbow-delimiters-depth-5-face  :foreground blue)
   (rainbow-delimiters-depth-6-face  :foreground yellow)
   (rainbow-delimiters-depth-7-face  :foreground green)
   ;;;; rjsx-mode
   (rjsx-tag                       :foreground fg)
   (rjsx-attr                      :foreground orange :slant 'italic :weight 'medium)
   (rjsx-tag-bracket-face          :foreground green)
   ;;;; solaire-mode
   (solaire-mode-line-face
    :inherit 'mode-line
    :background modeline-bg-l
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-l)))
   (solaire-mode-line-inactive-face
    :inherit 'mode-line-inactive
    :background modeline-bg-inactive-l
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive-l)))
   ;;;; web-mode
   (web-mode-html-tag-face         :foreground fg :slant 'italic))

  ;;;; Base theme variable overrides-
  ())

;;; {self.name}-theme.el ends here
        """
        self.theme = theme

    def save(self, dest):
        try:
            with open(f"{self.name}-theme.{self.extension}", "w") as f:
                f.write(self.theme)
        except FileNotFoundError:
            print(f"ERROR: the destination path '{self.name}' is invalid.")
            sys.exit(1)
